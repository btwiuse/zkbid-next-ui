"use client"

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/a8jwOhO9bv9
 */
import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table"
import { TabsTrigger, TabsList, TabsContent, Tabs } from "@/components/ui/tabs"
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

import '@polkadot/api-augment'
import React, { useState } from 'react'
import { GearKeyring } from '@gear-js/api'
import { encodeAddress } from '@polkadot/util-crypto'
import useSWR, { mutate } from 'swr'

const fetcher = async (url: string, accountId: string) => {
  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ accountId }),
  });

  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(`Failed to register for auction: ${errorData.message}`);
  }

  return res.json();
};

export function Component() {
  const [account, setAccount] = useState<null | { address: string; keyring: GearKeyring; }>(null);
  const [message, setMessage] = useState<null | string>(null);

  const generateAccount = async () => {
    const {keyring} = await GearKeyring.create('seed');
    
    const newAccount = {
      address: encodeAddress(keyring.publicKey, 137),
      keyring: keyring,
    };

    setAccount(newAccount);
  };

  const registerForAuction = async () => {
    setMessage(null);

    if (!account) {
      setMessage('Error: no account to register for auction. Go generate an account first.');
      return;
    }

    try {
      const data = await mutate(['/api/register', account.address], fetcher('/api/register', account.address), false);
      setMessage(`Registered for auction: ${JSON.stringify(data)}`);
    } catch (error) {
      setMessage(`Error registering for auction: ${error}`);
    }
  };

  const placeBid = async () => {
    window.alert('Not implemented');
  };

  return (
    <div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Bidder Address</TableHead>
            <TableHead>Funding Address</TableHead>
            <TableHead>Bid Price</TableHead>
            <TableHead>Bidding Time</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <TableRow>
            <TableCell>0x8d3e3e...</TableCell>
            <TableCell>0x5a1b2c...</TableCell>
            <TableCell>$500</TableCell>
            <TableCell>2024-02-20 15:30:45</TableCell>
          </TableRow>
          <TableRow>
            <TableCell>0x5a1b2c...</TableCell>
            <TableCell>0xf4e7d2...</TableCell>
            <TableCell>$700</TableCell>
            <TableCell>2024-02-20 14:20:10</TableCell>
          </TableRow>
          <TableRow>
            <TableCell>0xf4e7d2...</TableCell>
            <TableCell>0x8d3e3e...</TableCell>
            <TableCell>$1000</TableCell>
            <TableCell>2024-02-20 12:45:30</TableCell>
          </TableRow>
        </TableBody>
      </Table>
      <Tabs className="w-full" defaultValue="account">
        <TabsList className="grid grid-cols-3 gap-4">
          <TabsTrigger value="account">1. Generate Account</TabsTrigger>
          <TabsTrigger value="register">2. Register for Auction</TabsTrigger>
          <TabsTrigger value="bid">3. Place Bid</TabsTrigger>
        </TabsList>
        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Generate Account</CardTitle>
              <CardDescription>
                Creates a keypair for a temporary account and stores it on the frontend.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                  {/*<Button onClick={undefined}>Copy to Clipboard</Button>*/}
                </div>
              )}
              <Button onClick={generateAccount}>Generate Account</Button>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="register">
          <Card>
            <CardHeader>
              <CardTitle>Register for Auction</CardTitle>
              <CardDescription>Sends an HTTPS request to the backend to fetch a voucher.</CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                  {/*<Button onClick={undefined}>Copy to Clipboard</Button>*/}
                </div>
              )}
              <Button onClick={registerForAuction}>Register for Auction</Button>
              {message && <div>{message}</div>}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="bid">
          <Card>
            <CardHeader>
              <CardTitle>Place Bid</CardTitle>
              <CardDescription>
                Sends a message to the auction contract using the fetched voucher and generated account.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              {account && (
                <div className="flex items-center gap-2">
                  <Input className="w-full" id="address" readOnly type="text" value={account.address} />
                  {/*<Button onClick={undefined}>Copy to Clipboard</Button>*/}
                </div>
              )}
              <Input id="price" placeholder="Enter price" type="number" />
              <Textarea id="funding-proof" placeholder="Enter funding proof (0x...)" />
              <div className="flex items-center justify-end space-x-4">
                <Label className="" htmlFor="upload-proof">
                  Or upload proof from file
                </Label>
                <Input className="hidden" id="upload-proof" type="file" />
              </div>
              <Button onClick={placeBid}>Place Bid</Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
